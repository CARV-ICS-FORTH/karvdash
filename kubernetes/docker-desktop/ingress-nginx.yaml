apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  externalTrafficPolicy: Local
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: ssl-certificate
  namespace: ingress-nginx
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURiekNDQWxlZ0F3SUJBZ0lVQ0FGZk9uQmpyTDlRLzc3cVZXTlFGbWczYXQwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1J6RVhNQlVHQTFVRUF3d09LaTVzYjJOaGJIUmxjM1F1YldVeEZUQVRCZ05WQkFNTURHeHZZMkZzZEdWegpkQzV0WlRFVk1CTUdBMVVFQ2d3TWJHOWpZV3gwWlhOMExtMWxNQjRYRFRJd01ESXlPREV5TXpVeU1sb1hEVEl4Ck1ESXlOekV5TXpVeU1sb3dSekVYTUJVR0ExVUVBd3dPS2k1c2IyTmhiSFJsYzNRdWJXVXhGVEFUQmdOVkJBTU0KREd4dlkyRnNkR1Z6ZEM1dFpURVZNQk1HQTFVRUNnd01iRzlqWVd4MFpYTjBMbTFsTUlJQklqQU5CZ2txaGtpRwo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBNG5NQnh5bnptVG9TbWVQSXVJWldJRTQ4aENDZU9wM3pWWkt5Cm94RjJSUXQxbmZTSFlTcnNuRnJLZ3EwNkVCbjRrZGY2THlsMklhaTZLcHB4WUdyaU5SUk9EU0cxK2o5ZjY5TXIKZDBEMkp4OE14WFdUa253Q2hMREpjaTN6NXBKNis2aytYL1cyWDU2RzdLL0FudWdLaWRqcFRkY3R6bzBOQkhSUgoyKzRCWkxyMVdwMkR3RmJoVVFDcVJsbGlOWEpFS2RrSEJuRGYzN2RKeWhDdm9kUWJjZ2w2eWhXd0NESitROWhzCmZGVHU0VkNaWlpWdm8xUnRkNHNHaVpXTjUvNy81WmVNTDJnTGNvSEdXWWFtS2xqSWY3Q2tIbmpYYnFKd1NHWkIKZHlFT2ZOTzR6MU9uUnk4eXJBaG5mL21JTi9nZUZUUEVzS1BMZ3JsK0FKZDZqb28yVVFJREFRQUJvMU13VVRBZApCZ05WSFE0RUZnUVVNTU9BZWZ6UGlVRU5raEZwSVhZeU8wc2Zsb013SHdZRFZSMGpCQmd3Rm9BVU1NT0FlZnpQCmlVRU5raEZwSVhZeU8wc2Zsb013RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0MKQVFFQXdINUJibm42RWp4M0VMQ1U3azlDZk51VjRqVUwwMTZyVUZnMlZ5Mkh1S3dWT0NxczJnYjEvTWphc3FHVQpHdWFyRk90Q0hzWWl4YTRlekdUY1c5UG9JZmxGOW9aTFV4eGtmdS9YQnRSNUVJV3VvSm11dFZ6TzVubDJmQnpZClhBOGRWM3ZUSE04YnYzRHRsbTNzMEhHcmc2NFpEZ2JKbWM1d3FjUnl2aitxME1WODNaSHQ5QzNnSU1ONjcyZEwKVEdmQkpCNzFHcWlscDhQRi9TdG1IUVY5Rjhqc2lPTW55TFFabG56TUVncVVLOHl3SVRBZ2R3dTlDd3ZlNWl2cgptcUpwYTFiUHdmZVg5Ym1Lci9kZkJWVllseEdxZklxUDZUbk5tRCttOGxZZ1h1d01YRHFOVzBhekVzdVY3Y0d4CktLaG1adEZ3dUtNUWlUQTl0UUtQWUxidkFBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRGljd0hIS2ZPWk9oS1oKNDhpNGhsWWdUanlFSUo0Nm5mTlZrcktqRVhaRkMzV2Q5SWRoS3V5Y1dzcUNyVG9RR2ZpUjEvb3ZLWFlocUxvcQptbkZnYXVJMUZFNE5JYlg2UDEvcjB5dDNRUFluSHd6RmRaT1NmQUtFc01seUxmUG1rbnI3cVQ1ZjliWmZub2JzCnI4Q2U2QXFKMk9sTjF5M09qUTBFZEZIYjdnRmt1dlZhbllQQVZ1RlJBS3BHV1dJMWNrUXAyUWNHY04vZnQwbksKRUsraDFCdHlDWHJLRmJBSU1uNUQyR3g4Vk83aFVKbGxsVytqVkcxM2l3YUpsWTNuL3YvbGw0d3ZhQXR5Z2NaWgpocVlxV01oL3NLUWVlTmR1b25CSVprRjNJUTU4MDdqUFU2ZEhMektzQ0dkLytZZzMrQjRWTThTd284dUN1WDRBCmwzcU9palpSQWdNQkFBRUNnZ0VCQU5EVHlENzN4QXA1RUhCVUxHVm1sUVJEd2ZFQzk0Z000enIyQnNEMHVJR2gKdUx5S3BWSUpPSnhUNmM4cW1wSUFzVWNseWpVMTRoZldOcUJWUHRyd2xsem10YmZNYjdvd09YQUxsRmpzVWxQdgpnV0tUTkJ6eE9ZMU9UdWQ1MHlPOXo2WkhCQnVRUjdmVVJJNys0UDVwOUZYODcrSDEzdXRORGtVZVUrTWlrS3huCk5RcXk2NTduMjFHTGsrUVdKdUo5Y050RnFYMVFPS1FlSlhxbTFDV2wwWFdCTVBxZWtiMmJkbWdZOGZNRmUrcTQKd05Tb2F4QWxhSUVtMzZyQXg3bHluMldKeFVDR0hLWVZiUzdYQzBVYUdDWUkrbHRqM1NQSnZUcHp0V1A5dnBhSApGMUpkQytZVFpJeUQzUW9SMkVuY3hzZmZ0dlNuSmFXcXplalFoaUZ6T0RVQ2dZRUE4T2RQdnpYRHpSaTBlVzZaCjFxbDJCZko5RHl6cTVOSUlFZDBXWE1HbEJrTkdHVmtJQWFOY2tvdDhudk03VVZiUzhoMXpWdE1EeVhLWHozVFMKcmpqQW40QUhJYWZIdXAxZnNZSHZkdmh4UUZBdWVCbTdnNzBha2s3c3k0Q0ZYVzJmZ1JzdGhKcU00dXJiWlVmQgp0T0pjTGF1ZHBCQnlKLzBkc1V0aTdqdDMrRmNDZ1lFQThLUFFBRE1Ea3FVRXpHclBzMXhiUHlZN1RYU2s5MExPCmhNT2x6WmtWL1VRUkRQMGMwN1RaYlkvK2VJQnVodDJrSys3ZDFvTXBiM3JxZWpsL0hxL21FOUFBUVZrU3RSeEUKNCtWclp3b1FwZUhnem8vcEhEMVo3Zm9EUG52ZTM1c0p2L3dqcTBtUXh0L2xmU0tCZWZPVFBHdmhVWEVsY1V4eQoxanhkTkNmMlBaY0NnWUJ2dmV1WXR0aW14c0hYM2J5UC9MVFpGMXg0OEkzWUs3QkFrUHV4ZE1VV1BaaERZNis2CkNzdUMwaDZ4SUFPd3ZBUkc5L0FySXVBTHpoS3EwUFowaDdDWmkycERheTdTMmZLc1JLZ04yRG0zNmpsVHppUFQKZktEWm9yQmx5S3lUNUtocTIyOW1wY1daNy9ScWF6bG5yT095NzNyRXdqZ2hZbUFtZitCWXZzN3NLd0tCZ0E3Ugp4OGw3V3NqNUtLWitIWFJxUjZSSDhuYitxL29lUHlHbCt0d0NoWHduYVBWbjBSS29uSXRHeHVFYzU3R2VqTEczCjhDbDV3bDkvTGxtQW1QZUcxYUI2dXNsTGR2OTRValhHdHlxTlVDRW5HL1VjbjdxQmZMeFBIVXdIek4zd2FsVk0KYmRYcW5lUGhmZnlLMTNadkxhNFc1clZoUm5FSHlEcXhWUHdWU2ZEWkFvR0JBT00rMjJrdWxEUGdDaTZzMEFjTAppbDJMZjlLdS9TVituUzJvdmhCNjJOOXhLdXFwK0I3eXltMkFvR2x6RGx6R1VybHR1VjN3b1dvSGJRUGJqS3pvCmxDWXExZ1FwYW5INW04aDJsRDViZEd3YlZqK2IwVitQbWs1V0VtQWJ3ZDB4a0JBaHZLM0ozUE11TVN0YVFDUUYKRFhsUitRNFJ1c0hpNVl6T201UFp3WS9nCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: ingress-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0
          args:
            - /nginx-ingress-controller
            - --default-ssl-certificate=$(POD_NAMESPACE)/ssl-certificate
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
---
apiVersion: v1
kind: LimitRange
metadata:
  name: ingress-nginx
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
spec:
  limits:
  - min:
      memory: 90Mi
      cpu: 100m
    type: Container